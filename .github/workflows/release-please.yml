name: Run Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest

    # Release-please creates a PR that tracks all changes
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          command: manifest
          token: ${{secrets.RELEASE_PLEASE_ACTION_TOKEN}}
          default-branch: main
          signoff: 'Shujaat Ali <16950646+shujieali@users.noreply.github.com>' #to be updated
    outputs:
      release_created: ${{ steps.release.outputs.releases_created }}
      all: ${{ toJSON(steps.release.outputs) }}
      paths_released: ${{ steps.release.outputs.paths_released }}

  sbom:
    needs: release-please
    runs-on: ubuntu-latest
    if: ${{ fromJSON(needs.release-please.outputs.paths_released)[0] != null }}
    # Continues with the release process even if SBOM generation fails.
    continue-on-error: true
    strategy:
      matrix:
        release: ${{ fromJSON(needs.release-please.outputs.paths_released) }}
    env:
      TAG: ${{ fromJSON(needs.release-please.outputs.all)[format('{0}--tag_name', matrix.release)] }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Extract Node.js version from .nvmrc
      - name: Get Node.js version from .nvmrc
        id: node_version
        run: |
          NODE_VERSION=$(cat .nvmrc)
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Generate SBOM
        run: |
          npm install -g npm@^10.2.0
          npm i
          npm sbom --sbom-format=cyclonedx --omit=dev --omit=peer --workspace=${{matrix.release}} > bom.json
      - name: Attach SBOM to artifact
        env:
          GITHUB_TOKEN: ${{secrets.RELEASE_PLEASE_ACTION_TOKEN}}
        run: gh release upload $TAG bom.json

  npm-release:
    needs: release-please
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.release_created }}
    strategy:
      matrix:
        release: ${{ fromJSON(needs.release-please.outputs.paths_released) }}
    steps:
      # The logic below handles the npm publication:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Extract Node.js version from .nvmrc
      - name: Get Node.js version from .nvmrc
        id: node_version
        run: |
          NODE_VERSION=$(cat .nvmrc)
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Build Package
        run: npm run build --workspace=${{ matrix.release }}

      # need to publish all unpublished versions to NPM here
      # Our scripts only publish versions that do not already exist.
      - name: Publish to NPM
        run: npm run publish-if-not-exist --workspace=${{ matrix.release }}
        env:
          NPM_TOKEN: ${{secrets.NPM_TOKEN}}

      - name: Build Docs
        run: npm run docs

      - name: Deploy Documentation ðŸš€
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: typedoc
